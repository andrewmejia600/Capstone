
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> if (!require(randomForest)) install.packages('randomForest')
Loading required package: randomForest
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> library(randomForest)
> if (!require(caret)) install.packages('caret')
Loading required package: caret
Loading required package: lattice
Loading required package: ggplot2

Attaching package: ‘ggplot2’

The following object is masked from ‘package:randomForest’:

    margin

> library(caret)
> if (!require(ROCR)) install.packages('ROCR')
Loading required package: ROCR
> library(ROCR)
> 
> if (!require(mlr)) install.packages('mlr')
Loading required package: mlr
Loading required package: ParamHelpers
Warning message: 'mlr' is in 'maintenance-only' mode since July 2019.
Future development will only happen in 'mlr3'
(<https://mlr3.mlr-org.com>). Due to the focus on 'mlr3' there might be
uncaught bugs meanwhile in {mlr} - please consider switching.

Attaching package: ‘mlr’

The following object is masked from ‘package:ROCR’:

    performance

The following object is masked from ‘package:caret’:

    train

> library(mlr)
> 
> if (!require(parallelMap)) install.packages('parallelMap')
Loading required package: parallelMap
> library(parallelMap)
> 
> if (!require(parallel)) install.packages('parallel')
Loading required package: parallel
> library(parallel)
> 
> 
> 
> read_data = read.csv('/users/mejiaa/CAPSTONE/Data/df_log_and_scaled.csv')
> data = do.call(data.frame,lapply(read_data, function(x) replace(x, is.infinite(x),0)))
> 
> data = data[,c(2:24)]
> colnames(data)[23] <- "VAC_PAR"
> 
> 
> rand_seed = 959
> set.seed(rand_seed)
> train_partition =  createDataPartition(
+   y= data$VAC_PAR,
+   p = .70,
+   list = FALSE
+ )
> train = data[train_partition,]
> test =  data[-train_partition,]
> print("Number of records in Training data")
[1] "Number of records in Training data"
> nrow(train)
[1] 236776
> print("Number of records in Testing data")
[1] "Number of records in Testing data"
> nrow(test)
[1] 101475
> 
> rand_seed = 959
> set.seed(rand_seed)
> # create baseline random forest model
> parallelStartSocket(cpus=detectCores())
Starting parallelization in mode=socket with cpus=36.
> bestmtry = tuneRF(x = train[,1:22], y = train[,23], stepFactor = 1.5, improve = 1e-5, ntree=500)
mtry = 7  OOB error = 0.01346751 
Searching left ...
mtry = 5 	OOB error = 0.01325641 
0.01567468 1e-05 
mtry = 4 	OOB error = 0.01332827 
-0.00542087 1e-05 
Searching right ...
mtry = 10 	OOB error = 0.01369491 
-0.03307875 1e-05 
Warning messages:
1: In randomForest.default(x, y, mtry = mtryStart, ntree = ntreeTry,  :
  The response has five or fewer unique values.  Are you sure you want to do regression?
2: In randomForest.default(x, y, mtry = mtryCur, ntree = ntreeTry,  :
  The response has five or fewer unique values.  Are you sure you want to do regression?
3: In randomForest.default(x, y, mtry = mtryCur, ntree = ntreeTry,  :
  The response has five or fewer unique values.  Are you sure you want to do regression?
4: In randomForest.default(x, y, mtry = mtryCur, ntree = ntreeTry,  :
  The response has five or fewer unique values.  Are you sure you want to do regression?
> parallelStop()
Stopped parallelization. All cleaned up.
> 
> rand_seed = 959
> set.seed(rand_seed)
> # create baseline random forest model
> parallelStartSocket(cpus=detectCores())
Starting parallelization in mode=socket with cpus=36.
> random_forest_1 <- randomForest(VAC_PAR ~., data = train, ntree = 50, importance=TRUE, na.action = na.roughfix, maxnodes = 10)
Warning message:
In randomForest.default(m, y, ...) :
  The response has five or fewer unique values.  Are you sure you want to do regression?
> preds_1 = predict(random_forest_1,test[,-23])
> parallelStop()
Stopped parallelization. All cleaned up.
> 
> preds_1_cut = ifelse(preds_1>.5,1,0)
> confusionMatrix(as.factor(preds_1_cut),as.factor(test$VAC_PAR), positive = "1")
Confusion Matrix and Statistics

          Reference
Prediction     0     1
         0 89402   214
         1  2704  9155
                                          
               Accuracy : 0.9712          
                 95% CI : (0.9702, 0.9723)
    No Information Rate : 0.9077          
    P-Value [Acc > NIR] : < 2.2e-16       
                                          
                  Kappa : 0.8467          
                                          
 Mcnemar's Test P-Value : < 2.2e-16       
                                          
            Sensitivity : 0.97716         
            Specificity : 0.97064         
         Pos Pred Value : 0.77199         
         Neg Pred Value : 0.99761         
             Prevalence : 0.09233         
         Detection Rate : 0.09022         
   Detection Prevalence : 0.11687         
      Balanced Accuracy : 0.97390         
                                          
       'Positive' Class : 1               
                                          
> F_meas(as.factor(preds_1_cut),as.factor(test$VAC_PAR))
[1] 0.9839425
> set.seed(rand_seed)
> varImpPlot(random_forest_1, cex = .7, main = "Variable Importance",pt.cex = 1,color = 'grey41',frame.plot = FALSE,lcolor = 'black')
> 
